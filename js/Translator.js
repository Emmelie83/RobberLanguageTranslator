/**
 * En klass som g√∂r att anv√§ndaren kan √∂vers√§tta text fr√•n vanlig svenska till r√∂varspr√•ket.
 * Anv√§ndaren skriver eller kopierar in texten och trycker p√• knappen "√ñvers√§tt".
 * @author Emmelie Johansson
 */
class Translator {
    constructor() {
        // H√§mtar elementens elementobjekt
        this.inputField = document.getElementById("input_field");
        this.outputField = document.getElementById("output_field");
        this.buttonTranslate1 = document.getElementById("button_translate1");
        this.buttonTranslate2 = document.getElementById("button_translate2");
        // En array med alfabetets konsonanter, versala och gemena
      this.cons = [
        "b", "B", "d", "D", "f", "F", "g", "G", "h", "H", "j", "J",
        "k", "K", "l", "L", "m", "M", "n", "N", "p", "P", "q", "Q",
        "r", "R", "s", "S", "t", "T", "v", "V", "w", "W", "z", "Z",
        "ü¶Ö", "üê•", "‚ôõ", "‚ôö", "‚ôú", "‚ôù", "‚ò†", "‚òÉ", "‚öì", "‚öìÔ∏é", "üéØ", "üéØÔ∏é",
        "‚ö°", "‚ö°Ô∏é", "‚ò¢", "‚ò£", "‚ôû", "‚ôò", "‚ôü", "‚ôô", "üî™", "üó°Ô∏è"
        ];
        // En array med alfabetets vokaler
        this.vowel = ["a", "A", "o", "O", "u", "U", "√•", "√Ö", "e", "E", "i", "I", "y", "Y", "√§", "√Ñ", "√∂", "√ñ"];
        // En array med alfabetets h√•rd"a vokaler
        this.vowelHard = ["a", "A", "o", "O", "u", "U", "√•", "√Ö"];
        // En array med alfabetets mjuka vokaler
        this.vowelSoft = ["e", "E", "i", "I", "y", "Y", "√§", "√Ñ", "√∂", "√ñ"];

        /* Lista med tecken som byts ut. Enligt reglerna f√∂r r√∂varspr√•ket ska "x" bli 
        till "ks", "ck" bli till "kk" och "och" bli till "ok". Sje- och tj-ljudet ska behandlas 
        som en konsonant, som h√§r betecknas " É". */
      this.replacements = [
        [/X/g, "Ks"],
        [/x/g, "ks"],
        // Ck f√∂rekommer aldrig i b√∂rjan av ord
        [/ck/gi, "kk"],
        [/Och\s/g, "Ok "],
        [/\soch/gi, " ok"],

        [/Ch/g, "ü¶Ö"],  
        [/ch/g, "üê•"],   

        [/Stj/g, "‚ôõ"],
        [/stj/g, "‚ôö"],

        [/Tch/g, "‚ôú"],
        [/tch/g, "‚ôù"],

        [/Ssj/g, "‚ò†"],
        [/ssj/g, "‚òÉ"],

        [/Sj/g, "‚öì"],
        [/sj/g, "‚öìÔ∏é"], 

        [/Tj/g, "üéØ"],
        [/tj/g, "üéØÔ∏é"],

        [/Sch/g, "‚ö°"],
        [/sch/g, "‚ö°Ô∏é"],

        [/Sh/g, "‚ò¢"],
        [/sh/g, "‚ò£"],

        [/Skj/g, "‚ôû"],
        [/skj/g, "‚ôò"],

        [/Kj/g, "‚ôü"],
        [/kj/g, "‚ôô"],

        [/Ske/g, "üî™e"],
        [/ske/g, "üó°Ô∏èe"],
        [/Ski/g, "üî™i"],
        [/ski/g, "üó°Ô∏èi"],
        [/Sky/g, "üî™y"],
        [/sky/g, "üó°Ô∏èy"],
        [/Sk√§/g, "üî™√§"],
        [/sk√§/g, "üó°Ô∏è√§"],
        [/Sk√∂/g, "üî™√∂"],
        [/sk√∂/g, "üó°Ô∏è√∂"]
      ];
      
      this.reverseReplacements = [
        [/ü¶Ö/g, "Ch"],
        [/üê•/g, "ch"],

        [/‚ôõ/g, "Stj"],
        [/‚ôö/g, "stj"],

        [/‚ôú/g, "Tch"],
        [/‚ôù/g, "tch"],

        [/‚ò†/g, "Ssj"],
        [/‚òÉ/g, "ssj"],

        [/‚öì/g, "Sj"],
        [/‚öìÔ∏é/g, "sj"],

        [/üéØ/g, "Tj"],
        [/üéØÔ∏é/g, "tj"],

        [/‚ö°/g, "Sch"],
        [/‚ö°Ô∏é/g, "sch"],

        [/‚ò¢/g, "Sh"],
        [/‚ò£/g, "sh"],

        [/‚ôû/g, "Skj"],
        [/‚ôò/g, "skj"],

        [/‚ôü/g, "Kj"],
        [/‚ôô/g, "kj"],

        [/üî™e/g, "Ske"],
        [/üó°Ô∏èe/g, "ske"],
        [/üî™i/g, "Ski"],
        [/üó°Ô∏èi/g, "ski"],
        [/üî™y/g, "Sky"],
        [/üó°Ô∏èy/g, "sky"],
        [/üî™√§/g, "Sk√§"],
        [/üó°Ô∏è√§/g, "sk√§"],
        [/üî™√∂/g, "Sk√∂"],
        [/üó°Ô∏è√∂/g, "sk√∂"]
      ];
    
        /* Funktioner som k√∂rs n√§r anv√§ndaren trycker p√• knappen (knapp1 eller knapp2 visas 
        beroende p√• sk√§rmstorlek) */
        this.buttonTranslate1.addEventListener("click", () => {
            this.translate();
        });
    
        this.buttonTranslate2.addEventListener("click", () => {
            this.translate();
        });
    }
  
    /* Funktion som byter ut tecken. 
    * @param text - text som anv√§ndaren matat in
    * @return replacedText - texten med tecknen utbytta
    */
    replace(text) {
        let replacedText = text;
        for (const [pattern, replacement] of this.replacements) {
            replacedText = replacedText.replace(pattern, replacement);
        }
        return replacedText;
    }
  
    /* Funktion som tar h√§nsyn till vissa specialregler som g√§ller n√§r c f√∂ljs av vokal
    * @param textArr - lista med tecknen fr√•n den text som anv√§ndaren matat in, fast med vissa
    * tecken utbytta enligt funktionen replace(text).
    * @return newTextArray - lista med tecknen fr√•n textArr fast med justeringar
    * gjorda f√∂r c d√• c f√∂ljs av vokal
    */
    changeC(textArr) {
        const newTextArrWithIcons = [];
    
        for (let i = 0; i < textArr.length; i++) {
            const currentChar = textArr[i];
            const nextChar = textArr[i + 1];
            const previousChar = textArr[i - 1];
            if (currentChar === "C") {
                if (this.vowelSoft.includes(nextChar)) {
                    // C f√∂ljd av mjuk vokal blir till S
                  newTextArrWithIcons.push("S");
                } else {
                    // C f√∂ljd av h√•rd vokal blir till K
                  newTextArrWithIcons.push("K");
                }
            } else if (currentChar === "c") {
                if (this.vowelSoft.includes(nextChar)) {
                    // c f√∂ljd av mjuk vokal blir till s
                  newTextArrWithIcons.push("s");
                } else {
                    // c f√∂ljd av h√•rd vokal blir till k
                  newTextArrWithIcons.push("k");
                }
            } else {
                // F√∂r alla andra tecken g√∂rs ingen √§ndring
              newTextArrWithIcons.push(currentChar);
            }
        }
        // Den nya listan returneras
        return newTextArrWithIcons;
    }
    
    /* Funktion som √∂vers√§tter till r√∂varspr√•ket
    * @param newTextArrWithIcons - lista med tecknen fr√•n den text som anv√§ndaren matat in, fast med
    * vissa tecken utbytta enligt funktionen replace() och andra enligt funktionen 
    * changeC()
    * @return translatedTextArr - string med den √∂versatta texten
    */
  translateTextWithIcons(newTextArrWithIcons) {
        let translatedText = "";
    for (const element of newTextArrWithIcons) {
            const currentChar = element;
      translatedText += currentChar;
            if (this.cons.includes(currentChar)) {
              translatedText += "o" + currentChar.toLowerCase();
            }
        }
      return translatedText;
  }
  
  reverse(translatedText) {
    let reversedText = translatedText;
    for (const [pattern, reverseReplacement] of this.reverseReplacements) {
      reversedText = reversedText.replace(pattern, reverseReplacement);
    }
    return reversedText;
  }

    /* Funktion som h√§mtar den text som anv√§ndaren matat in, k√∂r funktionen replace(), 
    * delar upp str√§ngen i tecken som sparas i en lista, k√∂r funktionen changeChandC()
    * och funktionen translateText() och slutligen skriver ut den √∂versatta texten i output-
    * f√§ltet
    */
    translate() {
        const text = this.inputField.value;
        const replacedText = this.replace(text);
        const textArr = Array.from(replacedText);
        const newTextArr = this.changeC(textArr);
        const translatedText = this.translateTextWithIcons(newTextArr);
        const reversedText = this.reverse(translatedText)
        this.outputField.innerHTML = reversedText;
    }
}